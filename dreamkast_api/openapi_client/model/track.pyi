# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Track(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "id",
        }
        
        class properties:
            id = schemas.NumberSchema
            name = schemas.StrSchema
            
            
            class videoPlatform(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'videoPlatform':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class videoId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'videoId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class channelArn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channelArn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class onAirTalk(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'onAirTalk':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "name": name,
                "videoPlatform": videoPlatform,
                "videoId": videoId,
                "channelArn": channelArn,
                "onAirTalk": onAirTalk,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videoPlatform"]) -> MetaOapg.properties.videoPlatform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videoId"]) -> MetaOapg.properties.videoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelArn"]) -> MetaOapg.properties.channelArn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onAirTalk"]) -> MetaOapg.properties.onAirTalk: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["videoPlatform"], typing_extensions.Literal["videoId"], typing_extensions.Literal["channelArn"], typing_extensions.Literal["onAirTalk"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videoPlatform"]) -> typing.Union[MetaOapg.properties.videoPlatform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videoId"]) -> typing.Union[MetaOapg.properties.videoId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelArn"]) -> typing.Union[MetaOapg.properties.channelArn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onAirTalk"]) -> typing.Union[MetaOapg.properties.onAirTalk, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["videoPlatform"], typing_extensions.Literal["videoId"], typing_extensions.Literal["channelArn"], typing_extensions.Literal["onAirTalk"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        videoPlatform: typing.Union[MetaOapg.properties.videoPlatform, None, str, schemas.Unset] = schemas.unset,
        videoId: typing.Union[MetaOapg.properties.videoId, None, str, schemas.Unset] = schemas.unset,
        channelArn: typing.Union[MetaOapg.properties.channelArn, None, str, schemas.Unset] = schemas.unset,
        onAirTalk: typing.Union[MetaOapg.properties.onAirTalk, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Track':
        return super().__new__(
            cls,
            *args,
            name=name,
            id=id,
            videoPlatform=videoPlatform,
            videoId=videoId,
            channelArn=channelArn,
            onAirTalk=onAirTalk,
            _configuration=_configuration,
        )
