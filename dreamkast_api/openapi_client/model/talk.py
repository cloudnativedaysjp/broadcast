# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Talk(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "trackId",
            "videoId",
            "abstract",
            "talkDifficulty",
            "title",
            "talkCategory",
            "showOnTimetable",
            "speakers",
            "dayId",
            "startTime",
            "endTime",
            "id",
            "talkDuration",
        }
        
        class properties:
            id = schemas.NumberSchema
            trackId = schemas.NumberSchema
            videoId = schemas.StrSchema
            title = schemas.StrSchema
            abstract = schemas.StrSchema
            
            
            class speakers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'speakers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class dayId(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dayId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            showOnTimetable = schemas.BoolSchema
            startTime = schemas.StrSchema
            endTime = schemas.StrSchema
            talkDuration = schemas.NumberSchema
            talkDifficulty = schemas.StrSchema
            talkCategory = schemas.StrSchema
            conferenceId = schemas.NumberSchema
            videoPlatform = schemas.StrSchema
            onAir = schemas.BoolSchema
            documentUrl = schemas.StrSchema
            
            
            class conferenceDayId(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conferenceDayId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class conferenceDayDate(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conferenceDayDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            startOffset = schemas.NumberSchema
            endOffset = schemas.NumberSchema
            actualStartTime = schemas.StrSchema
            actualEndTime = schemas.StrSchema
            
            
            class presentationMethod(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'presentationMethod':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "trackId": trackId,
                "videoId": videoId,
                "title": title,
                "abstract": abstract,
                "speakers": speakers,
                "dayId": dayId,
                "showOnTimetable": showOnTimetable,
                "startTime": startTime,
                "endTime": endTime,
                "talkDuration": talkDuration,
                "talkDifficulty": talkDifficulty,
                "talkCategory": talkCategory,
                "conferenceId": conferenceId,
                "videoPlatform": videoPlatform,
                "onAir": onAir,
                "documentUrl": documentUrl,
                "conferenceDayId": conferenceDayId,
                "conferenceDayDate": conferenceDayDate,
                "startOffset": startOffset,
                "endOffset": endOffset,
                "actualStartTime": actualStartTime,
                "actualEndTime": actualEndTime,
                "presentationMethod": presentationMethod,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    trackId: MetaOapg.properties.trackId
    videoId: MetaOapg.properties.videoId
    abstract: MetaOapg.properties.abstract
    talkDifficulty: MetaOapg.properties.talkDifficulty
    title: MetaOapg.properties.title
    talkCategory: MetaOapg.properties.talkCategory
    showOnTimetable: MetaOapg.properties.showOnTimetable
    speakers: MetaOapg.properties.speakers
    dayId: MetaOapg.properties.dayId
    startTime: MetaOapg.properties.startTime
    endTime: MetaOapg.properties.endTime
    id: MetaOapg.properties.id
    talkDuration: MetaOapg.properties.talkDuration
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackId"]) -> MetaOapg.properties.trackId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videoId"]) -> MetaOapg.properties.videoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abstract"]) -> MetaOapg.properties.abstract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["talkDifficulty"]) -> MetaOapg.properties.talkDifficulty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["talkCategory"]) -> MetaOapg.properties.talkCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showOnTimetable"]) -> MetaOapg.properties.showOnTimetable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speakers"]) -> MetaOapg.properties.speakers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayId"]) -> MetaOapg.properties.dayId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["talkDuration"]) -> MetaOapg.properties.talkDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conferenceId"]) -> MetaOapg.properties.conferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videoPlatform"]) -> MetaOapg.properties.videoPlatform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onAir"]) -> MetaOapg.properties.onAir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentUrl"]) -> MetaOapg.properties.documentUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conferenceDayId"]) -> MetaOapg.properties.conferenceDayId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conferenceDayDate"]) -> MetaOapg.properties.conferenceDayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startOffset"]) -> MetaOapg.properties.startOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endOffset"]) -> MetaOapg.properties.endOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actualStartTime"]) -> MetaOapg.properties.actualStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actualEndTime"]) -> MetaOapg.properties.actualEndTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presentationMethod"]) -> MetaOapg.properties.presentationMethod: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trackId"], typing_extensions.Literal["videoId"], typing_extensions.Literal["abstract"], typing_extensions.Literal["talkDifficulty"], typing_extensions.Literal["title"], typing_extensions.Literal["talkCategory"], typing_extensions.Literal["showOnTimetable"], typing_extensions.Literal["speakers"], typing_extensions.Literal["dayId"], typing_extensions.Literal["startTime"], typing_extensions.Literal["endTime"], typing_extensions.Literal["id"], typing_extensions.Literal["talkDuration"], typing_extensions.Literal["conferenceId"], typing_extensions.Literal["videoPlatform"], typing_extensions.Literal["onAir"], typing_extensions.Literal["documentUrl"], typing_extensions.Literal["conferenceDayId"], typing_extensions.Literal["conferenceDayDate"], typing_extensions.Literal["startOffset"], typing_extensions.Literal["endOffset"], typing_extensions.Literal["actualStartTime"], typing_extensions.Literal["actualEndTime"], typing_extensions.Literal["presentationMethod"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackId"]) -> MetaOapg.properties.trackId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videoId"]) -> MetaOapg.properties.videoId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abstract"]) -> MetaOapg.properties.abstract: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["talkDifficulty"]) -> MetaOapg.properties.talkDifficulty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["talkCategory"]) -> MetaOapg.properties.talkCategory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showOnTimetable"]) -> MetaOapg.properties.showOnTimetable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speakers"]) -> MetaOapg.properties.speakers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayId"]) -> MetaOapg.properties.dayId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["talkDuration"]) -> MetaOapg.properties.talkDuration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conferenceId"]) -> typing.Union[MetaOapg.properties.conferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videoPlatform"]) -> typing.Union[MetaOapg.properties.videoPlatform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onAir"]) -> typing.Union[MetaOapg.properties.onAir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentUrl"]) -> typing.Union[MetaOapg.properties.documentUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conferenceDayId"]) -> typing.Union[MetaOapg.properties.conferenceDayId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conferenceDayDate"]) -> typing.Union[MetaOapg.properties.conferenceDayDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startOffset"]) -> typing.Union[MetaOapg.properties.startOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endOffset"]) -> typing.Union[MetaOapg.properties.endOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actualStartTime"]) -> typing.Union[MetaOapg.properties.actualStartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actualEndTime"]) -> typing.Union[MetaOapg.properties.actualEndTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presentationMethod"]) -> typing.Union[MetaOapg.properties.presentationMethod, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trackId"], typing_extensions.Literal["videoId"], typing_extensions.Literal["abstract"], typing_extensions.Literal["talkDifficulty"], typing_extensions.Literal["title"], typing_extensions.Literal["talkCategory"], typing_extensions.Literal["showOnTimetable"], typing_extensions.Literal["speakers"], typing_extensions.Literal["dayId"], typing_extensions.Literal["startTime"], typing_extensions.Literal["endTime"], typing_extensions.Literal["id"], typing_extensions.Literal["talkDuration"], typing_extensions.Literal["conferenceId"], typing_extensions.Literal["videoPlatform"], typing_extensions.Literal["onAir"], typing_extensions.Literal["documentUrl"], typing_extensions.Literal["conferenceDayId"], typing_extensions.Literal["conferenceDayDate"], typing_extensions.Literal["startOffset"], typing_extensions.Literal["endOffset"], typing_extensions.Literal["actualStartTime"], typing_extensions.Literal["actualEndTime"], typing_extensions.Literal["presentationMethod"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        trackId: typing.Union[MetaOapg.properties.trackId, decimal.Decimal, int, float, ],
        videoId: typing.Union[MetaOapg.properties.videoId, str, ],
        abstract: typing.Union[MetaOapg.properties.abstract, str, ],
        talkDifficulty: typing.Union[MetaOapg.properties.talkDifficulty, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        talkCategory: typing.Union[MetaOapg.properties.talkCategory, str, ],
        showOnTimetable: typing.Union[MetaOapg.properties.showOnTimetable, bool, ],
        speakers: typing.Union[MetaOapg.properties.speakers, list, tuple, ],
        dayId: typing.Union[MetaOapg.properties.dayId, None, decimal.Decimal, int, float, ],
        startTime: typing.Union[MetaOapg.properties.startTime, str, ],
        endTime: typing.Union[MetaOapg.properties.endTime, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        talkDuration: typing.Union[MetaOapg.properties.talkDuration, decimal.Decimal, int, float, ],
        conferenceId: typing.Union[MetaOapg.properties.conferenceId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        videoPlatform: typing.Union[MetaOapg.properties.videoPlatform, str, schemas.Unset] = schemas.unset,
        onAir: typing.Union[MetaOapg.properties.onAir, bool, schemas.Unset] = schemas.unset,
        documentUrl: typing.Union[MetaOapg.properties.documentUrl, str, schemas.Unset] = schemas.unset,
        conferenceDayId: typing.Union[MetaOapg.properties.conferenceDayId, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        conferenceDayDate: typing.Union[MetaOapg.properties.conferenceDayDate, None, str, date, schemas.Unset] = schemas.unset,
        startOffset: typing.Union[MetaOapg.properties.startOffset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        endOffset: typing.Union[MetaOapg.properties.endOffset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        actualStartTime: typing.Union[MetaOapg.properties.actualStartTime, str, schemas.Unset] = schemas.unset,
        actualEndTime: typing.Union[MetaOapg.properties.actualEndTime, str, schemas.Unset] = schemas.unset,
        presentationMethod: typing.Union[MetaOapg.properties.presentationMethod, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Talk':
        return super().__new__(
            cls,
            *args,
            trackId=trackId,
            videoId=videoId,
            abstract=abstract,
            talkDifficulty=talkDifficulty,
            title=title,
            talkCategory=talkCategory,
            showOnTimetable=showOnTimetable,
            speakers=speakers,
            dayId=dayId,
            startTime=startTime,
            endTime=endTime,
            id=id,
            talkDuration=talkDuration,
            conferenceId=conferenceId,
            videoPlatform=videoPlatform,
            onAir=onAir,
            documentUrl=documentUrl,
            conferenceDayId=conferenceDayId,
            conferenceDayDate=conferenceDayDate,
            startOffset=startOffset,
            endOffset=endOffset,
            actualStartTime=actualStartTime,
            actualEndTime=actualEndTime,
            presentationMethod=presentationMethod,
            _configuration=_configuration,
        )
