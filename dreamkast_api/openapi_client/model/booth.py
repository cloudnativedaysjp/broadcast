# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Booth(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "pdfUrls",
            "sponsorId",
            "vimeoUrl",
            "miroUrl",
            "sponsorName",
            "description",
            "id",
            "published",
            "text",
            "abbr",
            "keyImageUrls",
            "logoUrl",
        }
        
        class properties:
            id = schemas.NumberSchema
            sponsorId = schemas.NumberSchema
            sponsorName = schemas.StrSchema
            published = schemas.BoolSchema
            description = schemas.StrSchema
            abbr = schemas.StrSchema
            text = schemas.StrSchema
            logoUrl = schemas.StrSchema
            vimeoUrl = schemas.StrSchema
            miroUrl = schemas.StrSchema
            
            
            class pdfUrls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                url = schemas.StrSchema
                                title = schemas.StrSchema
                                __annotations__ = {
                                    "url": url,
                                    "title": title,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "title", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "title", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                            title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                url=url,
                                title=title,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pdfUrls':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class keyImageUrls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'keyImageUrls':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "sponsorId": sponsorId,
                "sponsorName": sponsorName,
                "published": published,
                "description": description,
                "abbr": abbr,
                "text": text,
                "logoUrl": logoUrl,
                "vimeoUrl": vimeoUrl,
                "miroUrl": miroUrl,
                "pdfUrls": pdfUrls,
                "keyImageUrls": keyImageUrls,
                "url": url,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    pdfUrls: MetaOapg.properties.pdfUrls
    sponsorId: MetaOapg.properties.sponsorId
    vimeoUrl: MetaOapg.properties.vimeoUrl
    miroUrl: MetaOapg.properties.miroUrl
    sponsorName: MetaOapg.properties.sponsorName
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    published: MetaOapg.properties.published
    text: MetaOapg.properties.text
    abbr: MetaOapg.properties.abbr
    keyImageUrls: MetaOapg.properties.keyImageUrls
    logoUrl: MetaOapg.properties.logoUrl
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdfUrls"]) -> MetaOapg.properties.pdfUrls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sponsorId"]) -> MetaOapg.properties.sponsorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vimeoUrl"]) -> MetaOapg.properties.vimeoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["miroUrl"]) -> MetaOapg.properties.miroUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sponsorName"]) -> MetaOapg.properties.sponsorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyImageUrls"]) -> MetaOapg.properties.keyImageUrls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pdfUrls"], typing_extensions.Literal["sponsorId"], typing_extensions.Literal["vimeoUrl"], typing_extensions.Literal["miroUrl"], typing_extensions.Literal["sponsorName"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["published"], typing_extensions.Literal["text"], typing_extensions.Literal["abbr"], typing_extensions.Literal["keyImageUrls"], typing_extensions.Literal["logoUrl"], typing_extensions.Literal["url"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdfUrls"]) -> MetaOapg.properties.pdfUrls: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sponsorId"]) -> MetaOapg.properties.sponsorId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vimeoUrl"]) -> MetaOapg.properties.vimeoUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["miroUrl"]) -> MetaOapg.properties.miroUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sponsorName"]) -> MetaOapg.properties.sponsorName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyImageUrls"]) -> MetaOapg.properties.keyImageUrls: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pdfUrls"], typing_extensions.Literal["sponsorId"], typing_extensions.Literal["vimeoUrl"], typing_extensions.Literal["miroUrl"], typing_extensions.Literal["sponsorName"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["published"], typing_extensions.Literal["text"], typing_extensions.Literal["abbr"], typing_extensions.Literal["keyImageUrls"], typing_extensions.Literal["logoUrl"], typing_extensions.Literal["url"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pdfUrls: typing.Union[MetaOapg.properties.pdfUrls, list, tuple, ],
        sponsorId: typing.Union[MetaOapg.properties.sponsorId, decimal.Decimal, int, float, ],
        vimeoUrl: typing.Union[MetaOapg.properties.vimeoUrl, str, ],
        miroUrl: typing.Union[MetaOapg.properties.miroUrl, str, ],
        sponsorName: typing.Union[MetaOapg.properties.sponsorName, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        published: typing.Union[MetaOapg.properties.published, bool, ],
        text: typing.Union[MetaOapg.properties.text, str, ],
        abbr: typing.Union[MetaOapg.properties.abbr, str, ],
        keyImageUrls: typing.Union[MetaOapg.properties.keyImageUrls, list, tuple, ],
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, ],
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Booth':
        return super().__new__(
            cls,
            *args,
            pdfUrls=pdfUrls,
            sponsorId=sponsorId,
            vimeoUrl=vimeoUrl,
            miroUrl=miroUrl,
            sponsorName=sponsorName,
            description=description,
            id=id,
            published=published,
            text=text,
            abbr=abbr,
            keyImageUrls=keyImageUrls,
            logoUrl=logoUrl,
            url=url,
            _configuration=_configuration,
        )
