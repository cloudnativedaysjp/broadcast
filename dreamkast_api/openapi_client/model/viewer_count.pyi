# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ViewerCount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "track_id",
            "viewer_count",
        }
        
        class properties:
            track_id = schemas.NumberSchema
            viewer_count = schemas.NumberSchema
            conference_id = schemas.NumberSchema
            talk_id = schemas.NumberSchema
            __annotations__ = {
                "track_id": track_id,
                "viewer_count": viewer_count,
                "conference_id": conference_id,
                "talk_id": talk_id,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    track_id: MetaOapg.properties.track_id
    viewer_count: MetaOapg.properties.viewer_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_id"]) -> MetaOapg.properties.track_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewer_count"]) -> MetaOapg.properties.viewer_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conference_id"]) -> MetaOapg.properties.conference_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["talk_id"]) -> MetaOapg.properties.talk_id: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["track_id"], typing_extensions.Literal["viewer_count"], typing_extensions.Literal["conference_id"], typing_extensions.Literal["talk_id"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_id"]) -> MetaOapg.properties.track_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewer_count"]) -> MetaOapg.properties.viewer_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conference_id"]) -> typing.Union[MetaOapg.properties.conference_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["talk_id"]) -> typing.Union[MetaOapg.properties.talk_id, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["track_id"], typing_extensions.Literal["viewer_count"], typing_extensions.Literal["conference_id"], typing_extensions.Literal["talk_id"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        track_id: typing.Union[MetaOapg.properties.track_id, decimal.Decimal, int, float, ],
        viewer_count: typing.Union[MetaOapg.properties.viewer_count, decimal.Decimal, int, float, ],
        conference_id: typing.Union[MetaOapg.properties.conference_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        talk_id: typing.Union[MetaOapg.properties.talk_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ViewerCount':
        return super().__new__(
            cls,
            *args,
            track_id=track_id,
            viewer_count=viewer_count,
            conference_id=conference_id,
            talk_id=talk_id,
            _configuration=_configuration,
        )
