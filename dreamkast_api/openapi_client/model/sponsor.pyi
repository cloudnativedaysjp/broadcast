# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Sponsor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "logo_url",
            "name",
            "id",
            "abbr",
            "eventAbbr",
            "url",
        }
        
        class properties:
            id = schemas.NumberSchema
            eventAbbr = schemas.StrSchema
            name = schemas.StrSchema
            abbr = schemas.StrSchema
            url = schemas.StrSchema
            logo_url = schemas.StrSchema
            
            
            class sponsorType(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sponsorType':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class booth(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.NumberSchema
                        opened = schemas.BoolSchema
                        __annotations__ = {
                            "id": id,
                            "opened": opened,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["opened"]) -> MetaOapg.properties.opened: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "opened", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["opened"]) -> typing.Union[MetaOapg.properties.opened, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "opened", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    opened: typing.Union[MetaOapg.properties.opened, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'booth':
                    return super().__new__(
                        cls,
                        *args,
                        id=id,
                        opened=opened,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "eventAbbr": eventAbbr,
                "name": name,
                "abbr": abbr,
                "url": url,
                "logo_url": logo_url,
                "sponsorType": sponsorType,
                "booth": booth,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    logo_url: MetaOapg.properties.logo_url
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    abbr: MetaOapg.properties.abbr
    eventAbbr: MetaOapg.properties.eventAbbr
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventAbbr"]) -> MetaOapg.properties.eventAbbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sponsorType"]) -> MetaOapg.properties.sponsorType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["booth"]) -> MetaOapg.properties.booth: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["logo_url"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["abbr"], typing_extensions.Literal["eventAbbr"], typing_extensions.Literal["url"], typing_extensions.Literal["sponsorType"], typing_extensions.Literal["booth"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventAbbr"]) -> MetaOapg.properties.eventAbbr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sponsorType"]) -> typing.Union[MetaOapg.properties.sponsorType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["booth"]) -> typing.Union[MetaOapg.properties.booth, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["logo_url"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["abbr"], typing_extensions.Literal["eventAbbr"], typing_extensions.Literal["url"], typing_extensions.Literal["sponsorType"], typing_extensions.Literal["booth"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        logo_url: typing.Union[MetaOapg.properties.logo_url, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        abbr: typing.Union[MetaOapg.properties.abbr, str, ],
        eventAbbr: typing.Union[MetaOapg.properties.eventAbbr, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        sponsorType: typing.Union[MetaOapg.properties.sponsorType, list, tuple, schemas.Unset] = schemas.unset,
        booth: typing.Union[MetaOapg.properties.booth, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Sponsor':
        return super().__new__(
            cls,
            *args,
            logo_url=logo_url,
            name=name,
            id=id,
            abbr=abbr,
            eventAbbr=eventAbbr,
            url=url,
            sponsorType=sponsorType,
            booth=booth,
            _configuration=_configuration,
        )
