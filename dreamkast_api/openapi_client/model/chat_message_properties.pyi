# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ChatMessageProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            profileId = schemas.NumberSchema
            
            
            class speakerId(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'speakerId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            eventAbbr = schemas.StrSchema
            roomId = schemas.NumberSchema
            roomType = schemas.StrSchema
            body = schemas.StrSchema
            createdAt = schemas.StrSchema
            
            
            class messageType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CHAT(cls):
                    return cls("chat")
                
                @schemas.classproperty
                def QA(cls):
                    return cls("qa")
            
            
            class replyTo(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'replyTo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "profileId": profileId,
                "speakerId": speakerId,
                "eventAbbr": eventAbbr,
                "roomId": roomId,
                "roomType": roomType,
                "body": body,
                "createdAt": createdAt,
                "messageType": messageType,
                "replyTo": replyTo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileId"]) -> MetaOapg.properties.profileId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speakerId"]) -> MetaOapg.properties.speakerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventAbbr"]) -> MetaOapg.properties.eventAbbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roomId"]) -> MetaOapg.properties.roomId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roomType"]) -> MetaOapg.properties.roomType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageType"]) -> MetaOapg.properties.messageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replyTo"]) -> MetaOapg.properties.replyTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "profileId", "speakerId", "eventAbbr", "roomId", "roomType", "body", "createdAt", "messageType", "replyTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileId"]) -> typing.Union[MetaOapg.properties.profileId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speakerId"]) -> typing.Union[MetaOapg.properties.speakerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventAbbr"]) -> typing.Union[MetaOapg.properties.eventAbbr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roomId"]) -> typing.Union[MetaOapg.properties.roomId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roomType"]) -> typing.Union[MetaOapg.properties.roomType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageType"]) -> typing.Union[MetaOapg.properties.messageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replyTo"]) -> typing.Union[MetaOapg.properties.replyTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "profileId", "speakerId", "eventAbbr", "roomId", "roomType", "body", "createdAt", "messageType", "replyTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        profileId: typing.Union[MetaOapg.properties.profileId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        speakerId: typing.Union[MetaOapg.properties.speakerId, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        eventAbbr: typing.Union[MetaOapg.properties.eventAbbr, str, schemas.Unset] = schemas.unset,
        roomId: typing.Union[MetaOapg.properties.roomId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        roomType: typing.Union[MetaOapg.properties.roomType, str, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        messageType: typing.Union[MetaOapg.properties.messageType, str, schemas.Unset] = schemas.unset,
        replyTo: typing.Union[MetaOapg.properties.replyTo, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChatMessageProperties':
        return super().__new__(
            cls,
            *args,
            id=id,
            profileId=profileId,
            speakerId=speakerId,
            eventAbbr=eventAbbr,
            roomId=roomId,
            roomType=roomType,
            body=body,
            createdAt=createdAt,
            messageType=messageType,
            replyTo=replyTo,
            _configuration=_configuration,
            **kwargs,
        )
