# coding: utf-8

"""
    Dreamkast API

    This is a API definition of the Dreamakst. You can find a documentation of this API at http://api-docs.dev.cloudnativedays.jp/.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "copyright",
            "coc",
            "privacy_policy",
            "about",
            "name",
            "theme",
            "id",
            "abbr",
            "privacy_policy_for_speaker",
            "status",
        }
        
        class properties:
            id = schemas.NumberSchema
            name = schemas.StrSchema
            abbr = schemas.StrSchema
            status = schemas.StrSchema
            theme = schemas.StrSchema
            about = schemas.StrSchema
            privacy_policy = schemas.StrSchema
            privacy_policy_for_speaker = schemas.StrSchema
            copyright = schemas.StrSchema
            coc = schemas.StrSchema
            
            
            class conferenceDays(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                date = schemas.StrSchema
                                internal = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "date": date,
                                    "internal": internal,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "date", "internal", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["internal"]) -> typing.Union[MetaOapg.properties.internal, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "date", "internal", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                            internal: typing.Union[MetaOapg.properties.internal, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                date=date,
                                internal=internal,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conferenceDays':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "abbr": abbr,
                "status": status,
                "theme": theme,
                "about": about,
                "privacy_policy": privacy_policy,
                "privacy_policy_for_speaker": privacy_policy_for_speaker,
                "copyright": copyright,
                "coc": coc,
                "conferenceDays": conferenceDays,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    copyright: MetaOapg.properties.copyright
    coc: MetaOapg.properties.coc
    privacy_policy: MetaOapg.properties.privacy_policy
    about: MetaOapg.properties.about
    name: MetaOapg.properties.name
    theme: MetaOapg.properties.theme
    id: MetaOapg.properties.id
    abbr: MetaOapg.properties.abbr
    privacy_policy_for_speaker: MetaOapg.properties.privacy_policy_for_speaker
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyright"]) -> MetaOapg.properties.copyright: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coc"]) -> MetaOapg.properties.coc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy_policy"]) -> MetaOapg.properties.privacy_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["about"]) -> MetaOapg.properties.about: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy_policy_for_speaker"]) -> MetaOapg.properties.privacy_policy_for_speaker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conferenceDays"]) -> MetaOapg.properties.conferenceDays: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["copyright"], typing_extensions.Literal["coc"], typing_extensions.Literal["privacy_policy"], typing_extensions.Literal["about"], typing_extensions.Literal["name"], typing_extensions.Literal["theme"], typing_extensions.Literal["id"], typing_extensions.Literal["abbr"], typing_extensions.Literal["privacy_policy_for_speaker"], typing_extensions.Literal["status"], typing_extensions.Literal["conferenceDays"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyright"]) -> MetaOapg.properties.copyright: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coc"]) -> MetaOapg.properties.coc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy_policy"]) -> MetaOapg.properties.privacy_policy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["about"]) -> MetaOapg.properties.about: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abbr"]) -> MetaOapg.properties.abbr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy_policy_for_speaker"]) -> MetaOapg.properties.privacy_policy_for_speaker: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conferenceDays"]) -> typing.Union[MetaOapg.properties.conferenceDays, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["copyright"], typing_extensions.Literal["coc"], typing_extensions.Literal["privacy_policy"], typing_extensions.Literal["about"], typing_extensions.Literal["name"], typing_extensions.Literal["theme"], typing_extensions.Literal["id"], typing_extensions.Literal["abbr"], typing_extensions.Literal["privacy_policy_for_speaker"], typing_extensions.Literal["status"], typing_extensions.Literal["conferenceDays"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        copyright: typing.Union[MetaOapg.properties.copyright, str, ],
        coc: typing.Union[MetaOapg.properties.coc, str, ],
        privacy_policy: typing.Union[MetaOapg.properties.privacy_policy, str, ],
        about: typing.Union[MetaOapg.properties.about, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        theme: typing.Union[MetaOapg.properties.theme, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        abbr: typing.Union[MetaOapg.properties.abbr, str, ],
        privacy_policy_for_speaker: typing.Union[MetaOapg.properties.privacy_policy_for_speaker, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        conferenceDays: typing.Union[MetaOapg.properties.conferenceDays, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            copyright=copyright,
            coc=coc,
            privacy_policy=privacy_policy,
            about=about,
            name=name,
            theme=theme,
            id=id,
            abbr=abbr,
            privacy_policy_for_speaker=privacy_policy_for_speaker,
            status=status,
            conferenceDays=conferenceDays,
            _configuration=_configuration,
        )
